import argparse
import re

import pandas as pd

def clean_cve_data(f):
    df = pd.read_csv(f)
    for idx, row in df.iterrows():
        refs = eval(row['code_refs'])
        links_to_rem = set()
        new_link = ''
        for ref in refs:
            if not re.search(r"\b[0-9a-f]{5,40}\b", ref) \
                    and 'commit/' not in ref:
                links_to_rem.add(ref)
            elif '/master?' in ref or '/master/' in ref:
                links_to_rem.add(ref)
            elif '#' in ref and ('#comments' in ref or '#commitcomment' in ref):
                new_link = ref.split('#')[0]
                links_to_rem.add(ref)
            elif '.patch' in ref:
                new_link = ref.replace('.patch','')
                links_to_rem.add(ref)


        for ref in links_to_rem:
            refs.remove(ref)

        if len(new_link) > 0:
            refs.add(new_link)

        df.at[idx, 'code_refs'] = str(refs)

    df[df['code_refs'] != 'set()'].to_csv(f, index=False)    
    print(f"{len(df[df['code_refs'] != 'set()'])} patches were saved to {f}")

if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(description='Clean cve_details data:')
    parser.add_argument('-f', type=str, metavar='input file', help='file to clean')
    
    args = parser.parse_args()

    if args.f:
        clean_cve_data(args.f)
    else:
        print('Something wrong with the output file name or year.')

        